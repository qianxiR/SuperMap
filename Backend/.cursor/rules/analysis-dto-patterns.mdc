# 分析服务DTO设计模式

## 1. 基础DTO结构

### 所有分析DTO必须继承的基础类
```python
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from uuid import UUID

class BaseAnalysisDTO(BaseModel):
    """分析DTO基类"""
    name: str = Field(..., min_length=1, max_length=100, description="任务名称")
    description: Optional[str] = Field(None, max_length=500, description="任务描述")
    analysis_type: str = Field(..., description="分析类型")
    parameters: Dict[str, Any] = Field(..., description="分析参数")
```

## 2. 几何数据DTO

### GeometryDTO
```python
class GeometryDTO(BaseModel):
    """几何数据DTO"""
    type: str = Field(..., description="几何类型：Point/LineString/Polygon")
    coordinates: List[Any] = Field(..., description="坐标数组")
```

## 3. 分析任务DTO

### AnalysisTaskCreateDTO
```python
class AnalysisTaskCreateDTO(BaseModel):
    """创建分析任务DTO"""
    name: str = Field(..., min_length=1, max_length=100, description="任务名称")
    description: Optional[str] = Field(None, max_length=500, description="任务描述")
    analysis_type: str = Field(..., description="分析类型")
    parameters: Dict[str, Any] = Field(..., description="分析参数")
```

### AnalysisTaskUpdateDTO
```python
class AnalysisTaskUpdateDTO(BaseModel):
    """更新分析任务DTO"""
    name: Optional[str] = Field(None, min_length=1, max_length=100, description="任务名称")
    description: Optional[str] = Field(None, max_length=500, description="任务描述")
    parameters: Optional[Dict[str, Any]] = Field(None, description="分析参数")
```

## 4. 响应DTO

### AnalysisTaskResponseDTO
```python
class AnalysisTaskResponseDTO(BaseModel):
    """分析任务响应DTO"""
    task_id: str = Field(..., description="任务ID")
    name: str = Field(..., description="任务名称")
    description: Optional[str] = Field(None, description="任务描述")
    analysis_type: str = Field(..., description="分析类型")
    status: str = Field(..., description="任务状态")
    progress: float = Field(..., description="任务进度")
    created_at: str = Field(..., description="创建时间")
    started_at: Optional[str] = Field(None, description="开始时间")
    completed_at: Optional[str] = Field(None, description="完成时间")
    supermap_request: Optional[Dict[str, Any]] = Field(None, description="SuperMap请求参数")
    supermap_result: Optional[Dict[str, Any]] = Field(None, description="SuperMap结果")
    error_message: Optional[str] = Field(None, description="错误信息")
```

### AnalysisTaskDetailResponseDTO
```python
class AnalysisTaskDetailResponseDTO(BaseModel):
    """分析任务详情响应DTO"""
    task_id: str = Field(..., description="任务ID")
    name: str = Field(..., description="任务名称")
    analysis_type: str = Field(..., description="分析类型")
    status: str = Field(..., description="任务状态")
    progress: float = Field(..., description="任务进度")
    created_at: str = Field(..., description="创建时间")
    started_at: Optional[str] = Field(None, description="开始时间")
    completed_at: Optional[str] = Field(None, description="完成时间")
    supermap_result: Optional[Dict[str, Any]] = Field(None, description="SuperMap结果")
```

### AnalysisTaskListResponseDTO
```python
class AnalysisTaskListResponseDTO(BaseModel):
    """分析任务列表响应DTO"""
    task_id: str = Field(..., description="任务ID")
    name: str = Field(..., description="任务名称")
    analysis_type: str = Field(..., description="分析类型")
    status: str = Field(..., description="任务状态")
    created_at: str = Field(..., description="创建时间")
    supermap_service: Optional[str] = Field(None, description="SuperMap服务类型")
```

## 5. 任务管理DTO

### AnalysisListResponseDTO
```python
class AnalysisListResponseDTO(BaseModel):
    """分析任务列表响应DTO"""
    tasks: List[AnalysisTaskListResponseDTO] = Field(..., description="任务列表")
    total: int = Field(..., description="总数量")
    limit: int = Field(..., description="限制数量")
    offset: int = Field(..., description="偏移量")
```

### AnalysisResponseDTO
```python
class AnalysisResponseDTO(BaseModel):
    """通用分析响应DTO"""
    success: bool = Field(..., description="是否成功")
    message: str = Field(..., description="响应消息")
    data: Optional[Dict[str, Any]] = Field(None, description="响应数据")
    error_code: Optional[str] = Field(None, description="错误代码")
    details: Optional[Dict[str, Any]] = Field(None, description="错误详情")
```

## 6. 空间数据DTO

### SpatialDataCreateDTO
```python
class SpatialDataCreateDTO(BaseModel):
    """创建空间数据DTO"""
    name: str = Field(..., min_length=1, max_length=100, description="数据名称")
    data_type: str = Field(..., description="数据类型")
    geometry: GeometryDTO = Field(..., description="几何数据")
    attributes: Dict[str, Any] = Field(default_factory=dict, description="属性数据")
    crs: str = Field(default="EPSG:4326", description="坐标系")
```

### SpatialDataUpdateDTO
```python
class SpatialDataUpdateDTO(BaseModel):
    """更新空间数据DTO"""
    name: Optional[str] = Field(None, min_length=1, max_length=100, description="数据名称")
    data_type: Optional[str] = Field(None, description="数据类型")
    geometry: Optional[GeometryDTO] = Field(None, description="几何数据")
    attributes: Optional[Dict[str, Any]] = Field(None, description="属性数据")
    crs: Optional[str] = Field(None, description="坐标系")
```

### SpatialDataResponseDTO
```python
class SpatialDataResponseDTO(BaseModel):
    """空间数据响应DTO"""
    id: str = Field(..., description="数据ID")
    name: str = Field(..., description="数据名称")
    data_type: str = Field(..., description="数据类型")
    geometry: GeometryDTO = Field(..., description="几何数据")
    attributes: Dict[str, Any] = Field(..., description="属性数据")
    crs: str = Field(..., description="坐标系")
    created_at: str = Field(..., description="创建时间")
    updated_at: str = Field(..., description="更新时间")
```

### SpatialDataListResponseDTO
```python
class SpatialDataListResponseDTO(BaseModel):
    """空间数据列表响应DTO"""
    data: List[SpatialDataResponseDTO] = Field(..., description="数据列表")
    total: int = Field(..., description="总数量")
    limit: int = Field(..., description="限制数量")
    offset: int = Field(..., description="偏移量")
```

## 7. 分析参数DTO

### BufferAnalysisParameters
```python
class BufferAnalysisParameters(BaseModel):
    """缓冲区分析参数"""
    geometry: GeometryDTO = Field(..., description="输入几何")
    distance: float = Field(..., gt=0, description="缓冲距离")
    unit: str = Field(default="meters", description="距离单位")
    end_type: str = Field(default="round", description="端点类型")
    join_type: str = Field(default="round", description="连接类型")
    semicircle_line_segment: int = Field(default=10, description="圆弧线段数")
```

### ShortestPathParameters
```python
class ShortestPathParameters(BaseModel):
    """最短路径分析参数"""
    origin: GeometryDTO = Field(..., description="起点")
    destination: GeometryDTO = Field(..., description="终点")
    waypoints: List[GeometryDTO] = Field(default_factory=list, description="途经点列表")
    impedance: str = Field(default="time", description="阻抗类型")
    travel_mode: str = Field(default="driving", description="出行方式")
    optimization: str = Field(default="shortest", description="优化目标")
```

### intersectAnalysisParameters
```python
class intersectAnalysisParameters(BaseModel):
    """叠加分析参数"""
    layer1: str = Field(..., description="第一个图层ID")
    layer2: str = Field(..., description="第二个图层ID")
    operation_type: str = Field(..., description="叠加操作类型")
    tolerance: float = Field(default=0.001, description="容差值")
    include_attributes: bool = Field(default=True, description="是否包含属性数据")
```

## 8. SuperMap配置DTO

### SuperMapConfigDTO
```python
class SuperMapConfigDTO(BaseModel):
    """SuperMap服务配置DTO"""
    service_url: str = Field(..., description="SuperMap服务URL")
    dataset: Optional[str] = Field(None, description="数据集名称")
    weight_field: Optional[str] = Field(None, description="权重字段名")
    timeout: int = Field(default=30000, description="超时时间(毫秒)")
    result_setting: Optional[Dict[str, Any]] = Field(None, description="结果设置参数")
```

### ResultSettingDTO
```python
class ResultSettingDTO(BaseModel):
    """结果设置DTO"""
    returnEdgeFeatures: bool = Field(default=True, description="返回弧段要素")
    returnEdgeGeometry: bool = Field(default=True, description="返回弧段几何")
    returnEdgeIDs: bool = Field(default=True, description="返回弧段ID")
    returnNodeFeatures: bool = Field(default=True, description="返回节点要素")
    returnNodeGeometry: bool = Field(default=True, description="返回节点几何")
    returnNodeIDs: bool = Field(default=True, description="返回节点ID")
    returnPathGuides: bool = Field(default=True, description="返回行驶导引")
    returnRoutes: bool = Field(default=True, description="返回路由对象")
```

## 9. 验证规则

### 必需字段验证
```python
# 所有DTO必须包含的验证规则
- name: 长度1-100字符
- analysis_type: 必须指定分析类型
- parameters: 必须包含分析参数
- geometry: 必须包含type和coordinates
- distance: 必须大于0
- layer1, layer2: 必须指定图层ID
- operation_type: 必须指定叠加操作类型
```

### 枚举值验证
```python
from enum import Enum

class AnalysisType(str, Enum):
    CUSTOM = "custom"
    BUFFER = "buffer"
    SHORTEST_PATH = "shortest_path"
    intersect = "intersect"

class AnalysisStatus(str, Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"

class intersectOperationType(str, Enum):
    INTERSECTION = "intersection"
    UNION = "union"
    DIFFERENCE = "difference"
    SYMMETRIC_DIFFERENCE = "symmetric_difference"
```

## 10. 实际代码实现参考

### DTO使用示例
```python
# 创建最短路径分析任务
task_data = AnalysisTaskCreateDTO(
    name="最短路径分析任务",
    description="计算起点到终点的最短路径",
    analysis_type="shortest_path",
    parameters={
        "origin": {
            "type": "Point",
            "coordinates": [116.4074, 39.9042]
        },
        "destination": {
            "type": "Point",
            "coordinates": [116.4174, 39.9142]
        },
        "impedance": "time",
        "travel_mode": "driving"
    }
)

# 创建叠加分析任务
task_data = AnalysisTaskCreateDTO(
    name="叠加分析任务",
    description="计算两个图层的交集",
    analysis_type="intersect",
    parameters={
        "layer1": "layer_001",
        "layer2": "layer_002",
        "operation_type": "intersection",
        "tolerance": 0.001
    }
)

# 响应格式
response = {
    "success": True,
    "message": "分析任务创建成功",
    "data": {
        "task_id": "uuid-string",
        "name": "分析任务",
        "status": "pending",
        "progress": 0.0
    }
}
```

## 11. 开发检查清单

在创建新的DTO时，必须检查：
- [ ] 是否继承自BaseModel
- [ ] 是否包含完整的字段描述
- [ ] 是否使用正确的数据类型
- [ ] 是否包含默认值设置
- [ ] 是否定义字段验证规则
- [ ] 是否包含必需字段验证
- [ ] 是否使用Optional类型标注可选字段
- [ ] 是否包含字段长度限制
- [ ] 是否定义枚举值验证
- [ ] 是否包含示例数据
