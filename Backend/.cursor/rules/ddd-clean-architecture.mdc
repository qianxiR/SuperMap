# DDD + 清洁架构开发规范

## 架构层次关系

本项目采用四层清洁架构设计：
- **API层** (Controller) → **应用层** (Use Case) → **领域层** (Domain) → **基础设施层** (Infrastructure)

## 各层职责与编码规范

### 🟦 领域层 (Domain Layer) - 业务核心

**原则**: 不依赖任何外部技术，只包含业务逻辑

#### 实体 (Entities)
- 位置: `app/domains/{domain}/entities.py`
- 职责: 定义业务核心概念和业务规则
- 规范:
  - 使用 `@dataclass` 装饰器
  - 包含业务验证逻辑
  - 提供工厂方法 `create_new()`
  - 不依赖外部框架

#### 值对象 (Value Objects)
- 位置: `app/domains/{domain}/value_objects.py`
- 职责: 封装不可变的值和验证规则
- 规范:
  - 使用 `@dataclass(frozen=True)`
  - 在 `__post_init__` 中进行验证
  - 提供 `create()` 类方法

#### 仓储接口 (Repository Interface)
- 位置: `app/domains/{domain}/repositories.py`
- 职责: 定义数据操作契约
- 规范:
  - 使用抽象基类 `ABC`
  - 定义异步方法
  - 不包含具体实现

#### 领域服务 (Domain Services)
- 位置: `app/domains/{domain}/services.py`
- 职责: 复杂业务逻辑协调
- 规范:
  - 依赖仓储接口
  - 包含业务规则验证
  - 不处理HTTP或数据库细节

### 🟢 应用层 (Application Layer) - 业务流程编排

**原则**: 协调领域层组件，不包含业务规则

#### 用例 (Use Cases)
- 位置: `app/application/use_cases/{domain}/`
- 职责: 业务流程编排
- 规范:
  - 依赖领域服务
  - 处理DTO转换
  - 不包含业务规则
  - 返回统一格式结果

#### DTO (Data Transfer Objects)
- 位置: `app/application/dto/`
- 职责: 数据传输和验证
- 规范:
  - 使用 Pydantic BaseModel
  - 包含输入验证
  - 隔离外部请求与领域实体

### 🟡 API层 (API Layer) - 对外接口

**原则**: 处理HTTP请求/响应，参数验证，错误处理

#### 路由 (Routes)
- 位置: `app/api/v1/{domain}/`
- 职责: HTTP接口定义
- 规范:
  - 使用 FastAPI 路由
  - 依赖注入用例
  - 统一错误处理
  - 参数验证

### 🟠 基础设施层 (Infrastructure Layer) - 技术实现

**原则**: 实现具体技术细节，为内层提供支撑

#### 仓储实现 (Repository Implementation)
- 位置: `app/infrastructure/database/{database}/repositories.py`
- 职责: 具体数据访问实现
- 规范:
  - 实现领域层仓储接口
  - 处理数据库连接
  - 实体与模型转换

#### 外部服务集成
- 位置: `app/infrastructure/external/{service}/`
- 职责: 第三方服务封装
- 规范:
  - 封装外部API调用
  - 错误处理和重试
  - 配置管理

## 代码编写最佳实践

### 1. 依赖倒置原则
- 内层不依赖外层
- 外层依赖内层接口
- 使用依赖注入容器

### 2. 单一职责原则
- 每个类只负责一个职责
- 方法功能单一明确
- 避免上帝类

### 3. 开闭原则
- 对扩展开放
- 对修改关闭
- 使用策略模式

### 4. 接口隔离原则
- 客户端不依赖不需要的接口
- 接口功能单一
- 避免胖接口

## 文件命名规范

- 实体: `entities.py`
- 值对象: `value_objects.py`
- 仓储: `repositories.py`
- 服务: `services.py`
- 用例: `{domain}_use_case.py`
- DTO: `{domain}_dto.py`
- API: `{domain}.py`

## 开发流程

1. **从领域层开始**: 定义实体、值对象、仓储接口
2. **实现应用层**: 定义DTO、实现用例
3. **开发基础设施层**: 实现仓储、集成外部服务
4. **暴露API接口**: 定义路由、处理请求响应

## 测试策略

- **领域层**: 单元测试业务逻辑
- **应用层**: 集成测试用例
- **基础设施层**: 集成测试数据访问
- **API层**: 端到端测试接口
description:
globs:
alwaysApply: true
---
