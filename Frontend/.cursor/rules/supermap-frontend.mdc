---
alwaysApply: true
description: Global conventions for the SuperMap frontend (architecture, API style, selection formats, geometry units, theme usage)
---
# SuperMap Frontend Project Rules

## Project Structure
- **Entry Point**: [src/main.js](mdc:src/main.js)
- **Root App**: [src/App.vue](mdc:src/App.vue)
- **Router**: [src/router/index.ts](mdc:src/router/index.ts)
- **Stores**: [src/stores/](mdc:src/stores/)
- **Composables**: [src/composables/](mdc:src/composables/)
- **Components**: [src/components/](mdc:src/components/)
- **Views**: [src/views/](mdc:src/views/)
- **Types**: [src/types/](mdc:src/types/)

## Tech Stack
- Vue 3 (Composition API), OpenLayers (ol), Pinia, TypeScript, Vite

## Global Conventions
- **API 风格**: 每个功能遵循“输入数据格式 / 数据处理方法 / 输出数据格式”三段式说明与实现
- **无回退/无校验**: 功能实现中不编写回退方法或输入校验逻辑（由上层流程保证）
- **主题色**: 颜色统一引用 [src/styles/theme.css](mdc:src/styles/theme.css) 中的 CSS 变量，禁止硬编码颜色
- **单位**: 面积统一为“平方千米”，距离为“千米”，坐标以度表示并保留 6 位小数

## Selection and IO
- 三类选择：
  - 点击选择: `selectionStore.selectedFeatures`（`sourceTag='click'`）
  - 区域选择: `areaSelectionStore.selectedFeatures`（`sourceTag='area'`）
  - 属性选择: `featureQueryStore.queryResults`（`sourceTag='query'`）
- 地图高亮：统一通过 `mapStore.selectLayer` 渲染
- 序列化：使用 `ol.format.GeoJSON().writeFeatureObject` 输出 GeoJSON；单个为 Feature，多项为 FeatureCollection
- 保存/读取实用工具：[`src/utils/selectionIO.ts`](mdc:src/utils/selectionIO.ts)（详见 [`selection-io.mdc`](mdc:.cursor/rules/selection-io.mdc)）
  - `saveSelectedFeatures(key)` → 写入 `localStorage[key]`
  - `readSelectedAsGeoJSON(key)` / `readSelectedAsFeatures(key)`

## Map Interaction
- 选择入口：见 [src/composables/useMap.ts](mdc:src/composables/useMap.ts) 的交互逻辑
- 绘制或量测模式下不启用常规要素选择（根据工具状态切换）

## Drawing and Geometry
- 绘制图层识别：在用户绘制图层上设置 `isDrawLayer: true`，已保存的绘制图层可设置 `isSavedDrawLayer: true`
- 距离计算：哈弗辛公式（千米）；面积：球面多边形面积（平方千米）
- 常用属性：
  - 点：`longitude`, `latitude`, `coordinateUnit: '度'`
  - 线：`length`, `lengthUnit: '千米'`
  - 面：`area`, `areaUnit: '平方千米'`

## Stores
- Map Store: [src/stores/mapStore.ts](mdc:src/stores/mapStore.ts)
- Analysis Store: [src/stores/analysisStore.ts](mdc:src/stores/analysisStore.ts)
- Selection Store: [src/stores/selectionStore.ts](mdc:src/stores/selectionStore.ts)
- Area Selection Store: [src/stores/areaSelectionStore.ts](mdc:src/stores/areaSelectionStore.ts)
- Feature Query Store: [src/stores/featureQueryStore.ts](mdc:src/stores/featureQueryStore.ts)

## Composables Pattern
- 结构、响应式、Store 使用规范参见 [`vue-composables.mdc`](mdc:.cursor/rules/vue-composables.mdc)
- 图层管理：使用 `mapStore.vectorLayers` 管理；必要时通过展开运算符触发响应（`mapStore.vectorLayers = [...mapStore.vectorLayers]`）

## File & Import Rules
- 组件命名使用 PascalCase；按职责分组（`Map/`, `UI/`, `Layout/`）
- 使用 `@/` 作为 `src` 目录别名；导入顺序：Vue → 外部库 → 内部模块 → 类型
- 大型依赖按需动态导入

## Performance & Maintenance
- 清理未使用的要素与图层；组件卸载时移除事件监听
- 避免在长流程中残留引用导致内存泄漏

## Logging & Debugging
- 调试时输出有信息量的日志（要素数量、坐标、计算结果），并保持上下文

