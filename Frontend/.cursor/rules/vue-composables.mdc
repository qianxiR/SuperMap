# Vue Composables Rules

## Structure Pattern
```typescript
import { ref, computed } from 'vue'
import { useMapStore } from '@/stores/mapStore'
// ... other imports

export function useComposableName() {
  // Store instances
  const mapStore = useMapStore()
  const analysisStore = useAnalysisStore()
  
  // Reactive state
  const state = ref(initialValue)
  const computedValue = computed(() => /* computation */)
  
  // Functions
  const functionName = () => {
    // Implementation
  }
  
  // Return object with all public functions and state
  return {
    state,
    computedValue,
    functionName
  }
}
```

## Store Integration
- Always import stores at the top of composables
- Use store instances directly: `mapStore.map`, `analysisStore.drawMode`
- Access store methods: `mapStore.addLayer()`, `selectionStore.clearSelection()`

## Reactive State Management
- Use `ref()` for simple reactive values
- Use `computed()` for derived state
- Always return reactive values in the return object
- Access refs with `.value` in functions, without in templates

## Error Handling
- Wrap OpenLayers operations in try-catch blocks
- Log errors with context: `console.error('Operation failed:', error)`
- Use notification system for user feedback

## OpenLayers Integration
- Check `window.ol` availability before operations
- Use proper OpenLayers types: `feature: any`, `layer: any`
- Access geometry methods: `feature.getGeometry()`, `geometry.getCoordinates()`

## Layer Management Patterns
- Use `mapStore.vectorLayers` for layer tracking
- Force reactive updates: `mapStore.vectorLayers = [...mapStore.vectorLayers]`
- Set custom properties on layers: `layer.set('isDrawLayer', true)`

## Geometry Calculations
- Use Haversine formula for distance calculations
- Use spherical area formulas for polygon areas
- Store results with appropriate units and precision
description:
globs:
alwaysApply: true
---
