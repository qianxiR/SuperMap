---
description:
# 项目分析方法

## 基本路径

1. 数据类型
2. 引用样式
3. 使用组件
4. 面板容器
5. 交互逻辑
6. 状态管理
7. 组件通信
8. 路由管理

## 分析点与项目目录映射

1. 数据类型 → `src/types/`、`src/api/` 中类型声明
   - 主类型定义：`src/types/*.ts`、`src/types/*.d.ts`
   - SuperMap 相关声明：`src/types/supermap.d.ts`
   - 接口参数与响应类型：`src/api/*.ts`

2. 引用样式 → `src/styles/`、主题色集中在 `src/styles/theme.css`
   - 统一从 `theme.css` 引用变量，避免硬编码颜色

3. 使用组件 → `src/components/`、业务页面组件在 `src/views/`
   - 基础与复合组件：`src/components/**`
   - 业务页面与工具面板：`src/views/**`

4. 面板容器 → 仪表盘与工具面板所在目录
   - 传统模式容器：`src/views/dashboard/traditional/TraditionalMode.vue`
   - 分析工具面板：`src/views/dashboard/traditional/tools/*.vue`
   - 全局布局容器：`src/components/Layout/**`

5. 交互逻辑 → `src/composables/` 与 `src/utils/`
   - 分析逻辑与地图交互：`src/composables/*.ts`
   - 工具函数与封装：`src/utils/*.ts`

6. 状态管理 → `src/stores/`
   - 地图、分析、选择等 Pinia 仓库：`src/stores/*.ts`

7. 组件通信 → 以 Props/Emits、`composables`、`stores` 协作
   - 父子通信：组件 `props`/`emits`
   - 跨组件共享：`src/composables/*.ts`、`src/stores/*.ts`

8. 路由管理 → `src/router/index.ts`
   - 页面路由与模式切换：`src/router/index.ts`

## 插槽函数定义位置

### 具名插槽 (Named Slots)
- **TipWindow 组件** → `src/components/UI/TipWindow.vue`
  - `<slot name="icon">` - 自定义图标插槽
  - `<slot>` - 默认内容插槽

- **SplitPanel 组件** → `src/components/UI/SplitPanel.vue`
  - `<slot :name="`pane-${index}`" :pane="pane">` - 动态面板插槽，传递面板数据

### 默认插槽 (Default Slots)
- **PanelContainer** → `src/components/UI/PanelContainer.vue`
  - `<slot></slot>` - 面板内容容器

- **PanelWindow** → `src/components/UI/PanelWindow.vue`
  - `<slot></slot>` - 窗口内容容器

- **IconButton** → `src/components/UI/IconButton.vue`
  - `<slot></slot>` - 按钮图标内容

- **PrimaryButton/SecondaryButton** → `src/components/UI/PrimaryButton.vue`、`src/components/UI/SecondaryButton.vue`
  - `<slot>{{ text }}</slot>` - 按钮文本内容，支持自定义或默认文本

- **AutoScrollContainer** → `src/components/UI/AutoScrollContainer.vue`
  - `<slot />` - 可滚动内容容器

- **TraditionalInputGroup** → `src/components/UI/TraditionalInputGroup.vue`
  - `<slot></slot>` - select 元素的选项内容

### 插槽使用模式
- **内容分发**：通过 `<slot>` 实现组件内容的自定义
- **数据传递**：通过作用域插槽 `:pane="pane"` 向子组件传递数据
- **条件渲染**：结合 `v-if` 实现插槽内容的条件显示


globs:

alwaysApply: true
---
