---
alwaysApply: false
description: 选择要素格式（点击/区域/属性查询）与 selectionIO 的保存/读取 API
---
# 选择要素与 IO

本项目使用 OpenLayers 的 `ol.Feature` 作为所有选择来源的统一要素类型，并提供用于持久化与读取选择结果的工具 API。

## 选择来源
- 点击选择：存储于 `selectionStore.selectedFeatures`，并设置 `sourceTag = 'click'`
- 区域选择：存储于 `areaSelectionStore.selectedFeatures`，并设置 `sourceTag = 'area'`
- 属性查询选择：存储于 `featureQueryStore.queryResults`，并设置 `sourceTag = 'query'`

以上均为 `ol.Feature[]`，并通过 `mapStore.selectLayer` 进行高亮显示。

## 序列化格式
使用 `ol.format.GeoJSON().writeFeatureObject(feature)` 生成 GeoJSON。
- 单个：GeoJSON `Feature`
- 多个：GeoJSON `FeatureCollection`

## 工具 API
位置：[`src/utils/selectionIO.ts`](mdc:src/utils/selectionIO.ts)

### saveSelectedFeatures(key: string)
- 输入：用于 localStorage 的 `key`
- 处理：合并三处存储的要素，序列化为 Feature 或 FeatureCollection，保存到 `localStorage[key]`
- 输出：GeoJSON `Feature | FeatureCollection`

### readSelectedAsGeoJSON(key: string)
- 输入：`key`
- 处理：读取 `localStorage[key]` 的文本并进行 JSON 解析
- 输出：GeoJSON `Feature | FeatureCollection`

### readSelectedAsFeatures(key: string)
- 输入：`key`
- 处理：读取 GeoJSON 后使用 `ol.format.GeoJSON().readFeature` 转换为 `ol.Feature[]`
- 输出：`ol.Feature[]`

## 使用示例
```ts
import selectionIO from '@/utils/selectionIO'

const payload = selectionIO.saveSelectedFeatures('selected:current')
const geojson = selectionIO.readSelectedAsGeoJSON('selected:current')
const features = selectionIO.readSelectedAsFeatures('selected:current')
```

